AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 300

Description: >
  bingo-aws

  CloudFormation template for bingo-angular backend

Resources:
  BingoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: 'username'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'username'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

  # Allow service role to access DynamoDB table
  DynamoDBAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'dynamodb-access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'dynamodb:*'
            Resource:
              - !GetAtt BingoTable.Arn
      Roles:
        - Ref: 'ServiceRole'

  # Allow AppSync to assume service role
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'appsync.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  AppSyncLambdaInvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AppSyncLambdaInvokePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:*
            Resource: '*'
      Roles:
        - !Ref ServiceRole

  # GraphQL Api
  BingoQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: 'BingoQL'
      AuthenticationType: API_KEY

  # GraphQL Schema
  BingoQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt BingoQLApi.ApiId
      DefinitionS3Location: src/schema.graphql

  # AppSync Datasource
  BingoDataSource:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      ApiId: !GetAtt BingoQLApi.ApiId
      Name: 'BingoDataSource'
      Description: 'AppSync datasource to bingo DynamoDB table'
      Type: 'AMAZON_DYNAMODB'
      ServiceRoleArn: !GetAtt ServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref BingoTable
        AwsRegion: !Ref "AWS::Region"

  # Resolvers
  # JoinGameResolver:
  #   Type: AWS::AppSync::Resolver
  #   Properties:
  #     ApiId: !GetAtt BingoQLApi.ApiId
  #     TypeName: 'Mutation'
  #     FieldName: 'joinGame'
  #     DataSourceName: !GetAtt BingoDataSource.Name
  #     RequestMappingTemplate: |
  #       {
  #           "version" : "2017-02-28",
  #           "operation" : "PutItem",
  #           "key" : {
  #               "username" : { "S" : "${ctx.arguments.username}" }
  #           },
  #           "attributeValues" : {
  #               "table": $util.dynamodb.toDynamoDBJson($ctx.arguments.organisations)
  #           }
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($ctx.result)
  AllPlayersResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BingoQLApi.ApiId
      TypeName: 'Query'
      FieldName: 'allPlayers'
      DataSourceName: !GetAtt BingoDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan"
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result.items)

  JoinGameLambdaResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt BingoQLApi.ApiId
      TypeName: 'Mutation'
      FieldName: 'joinGame'
      DataSourceName: !GetAtt JoinGameDataSource.Name
      RequestMappingTemplate: |
        {
            "version": "2017-02-28",
            "operation": "Invoke",
            "payload": {
                "username": "${ctx.arguments.username}"
            }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  JoinGameDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt BingoQLApi.ApiId
      Name: 'JoinGameDataSource'
      Type: 'AWS_LAMBDA'
      ServiceRoleArn: !GetAtt ServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt JoinGameFunction.Arn

  JoinGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dist/
      Handler: app.joinGame
      Runtime: nodejs8.10
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaFullAccess
      Environment:
        Variables:
          DYNAMODB_BINGO_TABLE: !Ref BingoTable